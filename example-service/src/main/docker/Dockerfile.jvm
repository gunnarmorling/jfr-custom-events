####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the docker image run:
#
# mvn package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/flight-recorder-demo-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/flight-recorder-demo-jvm
#
###
# FROM fabric8/java-alpine-openjdk8-jre:1.6.5
# ENV JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
# ENV AB_ENABLED=jmx_exporter

# Be prepared for running in OpenShift too
# RUN adduser -G root --no-create-home --disabled-password 1001 \
#  && chown -R 1001 /deployments \
#  && chmod -R "g+rwX" /deployments \
#  && chown -R 1001:root /deployments

#FROM fedora:32
#
#RUN mkdir /tmp/jdk \
#     && cd /tmp/jdk \
#     && curl -O https://download.java.net/java/GA/jdk15/779bf45e88a44cbd9ea6621d33e33db1/36/GPL/openjdk-15_linux-x64_bin.tar.gz \
#     && tar -xvf openjdk-15_linux-x64_bin.tar.gz
#
#COPY target/lib/* /deployments/lib/
#COPY target/*-runner.jar /deployments/app.jar
#EXPOSE 8080
#
## run with user 1001
## USER 1001
#
#ENTRYPOINT [ "/tmp/jdk/jdk-15/bin/java", "-Dcom.sun.management.jmxremote", "-Dcom.sun.management.jmxremote.port=1898", "-Dcom.sun.management.jmxremote.rmi.port=1898", "-Djava.rmi.server.hostname=0.0.0.0", "-Dcom.sun.management.jmxremote.ssl=false", "-Dcom.sun.management.jmxremote.authenticate=false", "-Dcom.sun.management.jmxremote.local.only=false", "-jar", "/deployments/app.jar", "-Dquarkus.http.host=0.0.0.0", "-Djava.util.logging.manager=org.jboss.logmanager.LogManager" ]


FROM registry.access.redhat.com/ubi8/ubi-minimal:8.4

ARG JAVA_PACKAGE=java-17-openjdk-headless
ARG RUN_JAVA_VERSION=1.3.8
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'
# Install java and the run-java script
# Also set up permissions for user `1001`
#RUN microdnf install curl ca-certificates ${JAVA_PACKAGE} \
RUN microdnf install curl tar gzip ca-certificates \
    && mkdir /tmp/jdk \
    && cd /tmp/jdk \
    && curl --output openjdk-17_linux-x64_bin.tar.gz https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL/openjdk-17_linux-x64_bin.tar.gz \
    && tar xzf openjdk-17_linux-x64_bin.tar.gz \
    && rm -f openjdk-17_linux-x64_bin.tar.gz \
    && microdnf update \
    && microdnf clean all \
    && mkdir /deployments \
    && chown 1001 /deployments \
    && chmod "g+rwX" /deployments \
    && chown 1001:root /deployments \
    && curl https://repo1.maven.org/maven2/io/fabric8/run-java-sh/${RUN_JAVA_VERSION}/run-java-sh-${RUN_JAVA_VERSION}-sh.sh -o /deployments/run-java.sh \
    && chown 1001 /deployments/run-java.sh \
    && chmod 540 /deployments/run-java.sh \
    && echo "securerandom.source=file:/dev/urandom" >> /tmp/jdk/jdk-17/conf/security/java.security

# Configure the JAVA_OPTIONS, you can add -XshowSettings:vm to also display the heap size.
ENV JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
# We make four distinct layers so if there are application changes the library layers can be re-used
#COPY --chown=1001 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=1001 target/*.jar /deployments/app.jar
#COPY --chown=1001 target/quarkus-app/app/ /deployments/app/
#COPY --chown=1001 target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 1001

#ENTRYPOINT [ "/deployments/run-java.sh" ]
ENTRYPOINT [ "/tmp/jdk/jdk-17/bin/java", "-Dquarkus.datasource.jdbc.url=jdbc:postgresql://todo-db:5432/tododb", "-Dcom.sun.management.jmxremote", "-Dcom.sun.management.jmxremote.port=1898", "-Dcom.sun.management.jmxremote.rmi.port=1898", "-Djava.rmi.server.hostname=0.0.0.0", "-Dcom.sun.management.jmxremote.ssl=false", "-Dcom.sun.management.jmxremote.authenticate=false", "-Dcom.sun.management.jmxremote.local.only=false", "-jar", "/deployments/app.jar", "-Dquarkus.http.host=0.0.0.0", "-Djava.util.logging.manager=org.jboss.logmanager.LogManager" ]